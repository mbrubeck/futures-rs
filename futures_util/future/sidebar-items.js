initSidebarItems({"enum":[["MaybeDone","`MaybeDone`, a future that may have completed."]],"fn":[["empty","Creates a future which never resolves, representing a computation that never finishes."],["lazy","Creates a new future from a closure."],["maybe_done","Creates a new future from a closure."],["poll_fn","Creates a new future wrapping around a function returning `Poll`."],["ready","Create a future that is immediately ready with a value."]],"struct":[["CatchUnwind","Future for the `catch_unwind` combinator."],["Empty","A future which is never resolved."],["Flatten","Future for the `flatten` combinator."],["FlattenStream","Future for the `flatten_stream` combinator, flattening a future-of-a-stream to get just the result of the final stream as a stream."],["Fuse","A future which \"fuses\" a future once it's been resolved."],["Inspect","Do something with the item of a future, passing it on."],["IntoStream","A type which converts a `Future` into a `Stream` containing a single element."],["Join","Future for the `join` combinator, waiting for two futures to complete."],["Join3","Future for the `join3` combinator, waiting for three futures to complete."],["Join4","Future for the `join4` combinator, waiting for four futures to complete."],["Join5","Future for the `join5` combinator, waiting for five futures to complete."],["Lazy","A future which, when polled, invokes a closure and yields its result."],["Map","Future for the `map` combinator, changing the type of a future."],["OptionFuture","A future representing a value which may or may not be present."],["PollFn","A future which adapts a function returning `Poll`."],["Ready","A future that is immediately ready with a value"],["Shared","A future that is cloneable and can be polled in multiple threads. Use `Future::shared()` method to convert any future into a `Shared` future."],["Then","Future for the `then` combinator, chaining computations on the end of another future regardless of its outcome."],["WithExecutor","Future for the `with_executor` combinator, assigning an executor to be used when spawning other futures."]],"trait":[["FutureExt","An extension trait for `Future`s that provides a variety of convenient adapters."]]});